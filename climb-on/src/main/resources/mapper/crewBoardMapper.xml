<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ohgiraffers.climbon.crew.crewHome.dao.CrewBoardDAO">

    <resultMap id="crewBoard" type="com.ohgiraffers.climbon.crew.crewHome.dto.CrewBoardDTO">
        <id property="id" column="id"/>
        <result property="crewCode" column="crew_code"/>
        <result property="userId" column="user_id"/>
        <result property="category" column="category"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="imgUrl" column="img_url"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="viewCount" column="view_count"/>
        <result property="likeCount" column="like_count"/>
        <result property="isAnonymous" column="is_anonymous"/>
        <result property="status" column="status"/>
    </resultMap>

    <resultMap id="crewPost" type="com.ohgiraffers.climbon.crew.crewHome.dto.CrewPostDTO">
        <id property="id" column="id"/>
        <result property="crewCode" column="crew_code"/>
        <result property="userId" column="user_id"/>
        <result property="category" column="category"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="imgUrl" column="img_url"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="viewCount" column="view_count"/>
        <result property="likeCount" column="like_count"/>
        <result property="isAnonymous" column="is_anonymous"/>
        <result property="status" column="status"/>
        <result property="userNickname" column="nickname"/>
        <result property="userProfilePic" column="profile_pic"/>
        <result property="commentsCount" column="comments_count"/>
    </resultMap>

    <resultMap id="crewCommentResultMap" type="com.ohgiraffers.climbon.crew.crewHome.dto.CrewCommentDTO">
        <id property="id" column="id"/>
        <result property="postId" column="post_id"/>
        <result property="userId" column="user_id"/>
        <result property="content" column="content"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="status" column="status"/>

        <result property="userId" column="user_id"/>
        <result property="userNickname" column="nickname"/>
        <result property="userProfilePic" column="profile_pic"/>
    </resultMap>

    <!-- 카테고리 필터 & 페이징 처리 & 검색 & 작성자 정보 & 댓글 & 댓글 개수 & 조회수 게시글 목록 조회 -->
    <select id="getPostsByPageAndCategoryAndSearch" resultMap="crewPost">
        SELECT posts_with_comment_count.*
        FROM (
        SELECT p.*, u.nickname AS userNickname, u.user_id AS userID, u.profile_pic AS userProfilePic,
        (SELECT COUNT(*) FROM crew_comments WHERE post_id = p.id AND status = 1) AS comments_count
        FROM crew_posts p
        LEFT JOIN users u ON p.user_id = u.id
        <where>
            <if test="status != 0">   <!--where절에 조건문 넣으려면 if 절로 채워 줘야 되므로 이렇게 억지 조건을 추가했다.-->
                p.status = 1 <!-- 활성화된 게시글만 -->
            </if>
            <if test="category != null and category !='' and category != '전체'">
                AND p.category = #{category}    <!--category를 파라미터로 받는다-->
            </if>
            <if test="searchKeyword != null and searchKeyword != ''">  <!--searchKeyword를 파라미터로 받아 title 또는 content에 searchKeyword가 포함된 게시글 검색-->
                AND
                (p.title LIKE CONCAT('%', #{searchKeyword}, '%')       <!--LIKE CONCAT을 사용하여 제목과 내용에 검색어가 포함된 항목을 찾는다-->
                OR p.content LIKE CONCAT('%', #{searchKeyword}, '%'))
            </if>
        </where>
        ) AS posts_with_comment_count <!--위에서 AS로 만든 comment_count 별칭이 서브쿼리를 ORDER BY 절에서 직접 사용할 수 없기 때문에 임시서브쿼리(테이블처럼) 생성-->
        ORDER BY
        <choose>          <!--MyBatis의 switch-case 구문 특정 조건 만족하는 경우 선택적 적용-->
            <when test="sort == 'latest'">
                posts_with_comment_count.created_at DESC   <!-- 최신순 -->
            </when>
            <when test="sort == 'comments'">
                posts_with_comment_count.comments_count DESC
            </when>
            <when test="sort == 'views'">
                posts_with_comment_count.view_count DESC <!-- 조회순 -->
            </when>
            <when test="sort == 'hearts'">
                posts_with_comment_count.hearts_count DESC
            </when>
            <otherwise>
                posts_with_comment_count.created_at DESC   <!-- 기본값: 최신순-->
            </otherwise>
        </choose>
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 고정 게시글 쿼리 -->
    <select id="getFixedPostsByCategory" resultMap="crewPost">
        SELECT
        p.*,
        u.nickname AS userNickname,
        u.user_id AS userID,
        u.profile_pic AS userProfilePic,
        (SELECT COUNT(*) FROM crew_comments WHERE post_id = p.id AND status = 1) AS comments_count
        FROM crew_posts p
        LEFT JOIN users u ON p.user_id = u.id
        WHERE p.status = 1 AND p.category = #{category}
        ORDER BY p.created_at DESC
        LIMIT #{limit}
    </select>

    <!-- 카테고리 필터링 & 전체 게시글 수 조회 -->
    <select id="getTotalPostCount" resultType="int">
        SELECT COUNT(*) FROM crew_posts
        <where>
            status = 1
            <if test="category != null and category != '전체'">
                AND category = #{category}
            </if>
        </where>
    </select>



    <!--  게시글 추가  -->
    <insert id="insertPost" parameterType="com.ohgiraffers.climbon.crew.crewHome.dto.CrewBoardDTO">
        INSERT INTO crew_posts(crew_code, user_id, category, title, content, img_url, updated_at, is_anonymous, status)
           VALUES(
            #{crewCode},
            #{userId},
            #{category},
            #{title},
            #{content},
            #{imgUrl},
            DEFAULT,
            #{isAnonymous},
            1
        )
    </insert>

    <select id="getJustAddedPostById" parameterType="int">
        SELECT id
        FROM crew_posts
        WHERE user_id = #{id}
        ORDER BY created_at DESC
        LIMIT 1
    </select>

    <select id="selectLastPost" resultMap="crewBoard">
        SELECT * FROM crew_posts
        ORDER BY id DESC
        LIMIT 1;
    </select>

    <select id="getCrewCode" parameterType="int" resultType="Integer">
        SELECT crew_code
        FROM user_crew
        WHERE user_code = #{id}
    </select>

    <select id="selectOnePostById" parameterType="int" resultMap="crewBoard">
        SELECT * FROM crew_posts
        WHERE id = #{id};
    </select>

    <!--  게시글 수정  -->
    <update id="updatePostById" parameterType="com.ohgiraffers.climbon.crew.crewHome.dto.CrewBoardDTO">
        UPDATE crew_posts
        SET
        category = #{category},
        title = #{title},
        content = #{content},
        img_url = #{imgUrl},
        updated_at = DEFAULT,
        is_anonymous = #{isAnonymous}
        WHERE id = #{id};
    </update>

    <!-- 조회수 증가 -->
    <update id="incrementViewCount" parameterType="int">
        UPDATE crew_posts
        SET view_count = view_count + 1
        WHERE id = #{postId}
    </update>

    <!-- 특정 게시글 조회 (id로 조회), 작성자 정보 포함 -->
    <select id="getPostById" resultMap="crewPost">
        SELECT p.id, p.crew_code, p.user_id, u.nickname, p.title, p.content, p.created_at, p.updated_at, p.view_count, p.is_anonymous, p.like_count, p.img_url, p.category, p.status
        , (SELECT COUNT(*) FROM crew_comments WHERE post_id = p.id AND status = 1) AS comments_count  <!--댓글 수 계산하는 서브쿼리-->
        FROM crew_posts p
        LEFT JOIN users u ON p.user_id = u.id
        WHERE p.id = #{postId} AND p.status = true
    </select>

    <!-- 특정 게시글의 댓글 목록 조회-->
    <select id="getCommentsByPostId" resultMap="crewCommentResultMap">
        SELECT
            c.*,
            u.*
        FROM crew_comments c
        JOIN users u
        on c.user_id = u.id
        WHERE c.post_id = #{postId} AND c.status = 1
        ORDER BY c.created_at DESC
    </select>

    <select id="getCommentsById" resultMap="crewCommentResultMap">
        SELECT
            c.*,
            u.*
          FROM crew_comments c
          JOIN users u
            on c.user_id = u.id
         WHERE c.user_id = #{id} AND c.status = 1
         ORDER BY c.created_at DESC
    </select>

    <!-- 이전 게시글 -->
    <select id="getPreviousPost" resultMap="crewPost">
        SELECT p.*, u.nickname, u.profile_pic
        FROM crew_posts p
        LEFT JOIN users u ON p.user_id = u.id
        WHERE p.id &lt; #{postId} AND p.status = 1  <!-- &lt; -> < (부등호)라는뜻-->
        ORDER BY p.id DESC
        LIMIT 1
    </select>

    <!-- 다음 게시글 -->
    <select id="getNextPost" resultMap="crewPost">
        SELECT p.*, u.nickname, u.profile_pic
        FROM crew_posts p
        LEFT JOIN users u ON p.user_id = u.id
        WHERE p.id &gt; #{postId} AND p.status = 1  <!-- &gt; -> > (부등호)라는 뜻-->
        ORDER BY p.id ASC
        LIMIT 1
    </select>

    <!-- 댓글 추가 -->
    <insert id="insertComment" parameterType="com.ohgiraffers.climbon.crew.crewHome.dto.CrewCommentDTO">
        INSERT INTO crew_comments (post_id, user_id, content, created_at, status)
        VALUES (#{postId}, #{userId}, #{content}, NOW(), #{status})
    </insert>

    <!-- 댓글 수정 -->
    <update id="updateComment" parameterType="com.ohgiraffers.climbon.crew.crewHome.dto.CrewCommentDTO">
        UPDATE crew_comments
        SET post_id = #{postId}, user_id = #{userId}, content = #{content}, updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- 댓글 삭제(비활성화) -->
    <update id="deleteComment" parameterType="com.ohgiraffers.climbon.crew.crewHome.dto.CrewCommentDTO">
        UPDATE crew_comments
        SET status = 0
        WHERE id = #{id}
    </update>

    <!-- 게시글 삭제(비활성화) -->
    <update id="deletePost" parameterType="int">
        UPDATE crew_posts
        SET status = 0
        WHERE id = #{id};
    </update>

    <!-- 특정 게시글의 모든 댓글 status = 0으로 업데이트 게시글과 연동해서 댓글 삭제 쿼리문(트랜잭션처리 위해 짯다)-->
    <update id="deleteCommentsByPostId" parameterType="int">
        UPDATE crew_comments
        SET status = 0
        WHERE post_id = #{postId};
    </update>

    <select id="getCrewCodeByPostId" parameterType="int">
        SELECT crew_code
        FROM crew_posts
        WHERE id = #{postId}
    </select>
</mapper>